import express from 'express';
import db from '../db.js';

const router = express.Router();

// Helper function to generate invoice number
async function generateInvoiceNumber() {
  const settings = await db.get('SELECT invoice_prefix FROM settings LIMIT 1');
  const prefix = settings?.invoice_prefix || 'INV-';
  
  const lastInvoice = await db.get(`
    SELECT invoice_number FROM invoices 
    ORDER BY id DESC LIMIT 1
  `);
  
  let nextNumber = 1;
  if (lastInvoice) {
    const match = lastInvoice.invoice_number.match(/\d+$/);
    if (match) {
      nextNumber = parseInt(match[0]) + 1;
    }
  }
  
  return `${prefix}${String(nextNumber).padStart(5, '0')}`;
}

// GET all invoices
router.get('/', async (req, res) => {
  try {
    const invoices = await db.all(`
      SELECT i.*, c.name as client_name 
      FROM invoices i
      LEFT JOIN clients c ON i.client_id = c.id
      ORDER BY i.created_at DESC
    `);
    res.json(invoices);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// GET single invoice with line items
router.get('/:id', async (req, res) => {
  try {
    const invoice = await db.get('SELECT * FROM invoices WHERE id = ?', req.params.id);
    if (!invoice) {
      return res.status(404).json({ error: 'Invoice not found' });
    }

    const lineItems = await db.all('SELECT * FROM line_items WHERE invoice = ?', req.params.id);
    
    res.json({ ...invoice, line_items: lineItems });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// CREATE new invoice
router.post('/', async (req, res) => {
  try {
    const { 
      client_id, 
      date_of_issue, 
      due_date, 
      line_items = [],
      notes,
      status = 'draft'
    } = req.body;

    if (!client_id) {
      return res.status(400).json({ error: 'Client ID is required' });
    }

    // Get client info
    const client = await db.get('SELECT * FROM clients WHERE id = ?', client_id);
    if (!client) {
      return res.status(404).json({ error: 'Client not found' });
    }

    // Generate invoice number
    const invoice_number = await generateInvoiceNumber();

    // Calculate totals
    let subtotal = 0;
    line_items.forEach(item => {
      const itemTotal = (item.quantity || 1) * (item.rate || 0);
      subtotal += itemTotal;
    });

    const settings = await db.get('SELECT tax_rate FROM settings LIMIT 1');
    const tax_rate = settings?.tax_rate || 0;
    const tax = subtotal * tax_rate;
    const total = subtotal + tax;

    // Create invoice
    const result = await db.run(`
      INSERT INTO invoices (
        invoice_number, client_id, client_name, client_address, client_email,
        date_of_issue, due_date, subtotal, tax, total, status, notes
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `, [
      invoice_number,
      client_id,
      client.name,
      `${client.address}, ${client.city}, ${client.state} ${client.zip}`,
      client.email,
      date_of_issue || new Date().toISOString().split('T')[0],
      due_date,
      subtotal,
      tax,
      total,
      status,
      notes
    ]);

    const invoiceId = result.lastID;

    // Insert line items
    for (const item of line_items) {
      const itemTotal = (item.quantity || 1) * (item.rate || 0);
      await db.run(`
        INSERT INTO line_items (invoice, service, category, description, quantity, rate, total)
        VALUES (?, ?, ?, ?, ?, ?, ?)
      `, [
        invoiceId,
        item.service || null,
        item.category,
        item.description,
        item.quantity || 1,
        item.rate || 0,
        itemTotal
      ]);
    }

    // Fetch complete invoice
    const newInvoice = await db.get('SELECT * FROM invoices WHERE id = ?', invoiceId);
    const invoiceLineItems = await db.all('SELECT * FROM line_items WHERE invoice = ?', invoiceId);

    res.status(201).json({ ...newInvoice, line_items: invoiceLineItems });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// UPDATE invoice
router.put('/:id', async (req, res) => {
  try {
    const { status, due_date, notes, line_items } = req.body;
    
    const invoice = await db.get('SELECT * FROM invoices WHERE id = ?', req.params.id);
    if (!invoice) {
      return res.status(404).json({ error: 'Invoice not found' });
    }

    // If line items are provided, recalculate totals
    if (line_items && line_items.length > 0) {
      // Delete existing line items
      await db.run('DELETE FROM line_items WHERE invoice = ?', req.params.id);

      // Calculate new totals
      let subtotal = 0;
      for (const item of line_items) {
        const itemTotal = (item.quantity || 1) * (item.rate || 0);
        subtotal += itemTotal;

        await db.run(`
          INSERT INTO line_items (invoice, service, category, description, quantity, rate, total)
          VALUES (?, ?, ?, ?, ?, ?, ?)
        `, [
          req.params.id,
          item.service || null,
          item.category,
          item.description,
          item.quantity || 1,
          item.rate || 0,
          itemTotal
        ]);
      }

      const settings = await db.get('SELECT tax_rate FROM settings LIMIT 1');
      const tax_rate = settings?.tax_rate || 0;
      const tax = subtotal * tax_rate;
      const total = subtotal + tax;

      await db.run(`
        UPDATE invoices 
        SET subtotal = ?, tax = ?, total = ?, status = ?, due_date = ?, notes = ?
        WHERE id = ?
      `, [subtotal, tax, total, status || invoice.status, due_date || invoice.due_date, notes || invoice.notes, req.params.id]);
    } else {
      // Just update status/notes
      await db.run(`
        UPDATE invoices 
        SET status = ?, due_date = ?, notes = ?
        WHERE id = ?
      `, [status || invoice.status, due_date || invoice.due_date, notes || invoice.notes, req.params.id]);
    }

    const updatedInvoice = await db.get('SELECT * FROM invoices WHERE id = ?', req.params.id);
    const invoiceLineItems = await db.all('SELECT * FROM line_items WHERE invoice = ?', req.params.id);

    res.json({ ...updatedInvoice, line_items: invoiceLineItems })
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// DELETE invoice
router.delete('/:id', async (req, res) => {
  try {
    const invoice = await db.get('SELECT * FROM invoices WHERE id = ?', req.params.id);
    if (!invoice) {
      return res.status(404).json({ error: 'Invoice not found' });
    }

    await db.run('DELETE FROM line_items WHERE invoice = ?', req.params.id);
    await db.run('DELETE FROM invoices WHERE id = ?', req.params.id);
    
    res.json({ message: 'Invoice deleted successfully' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

export default router;