import sqlite3 from 'sqlite3';
import { open } from 'sqlite';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

let db;

async function initDatabase() {
  db = await open({
    filename: path.join(__dirname, 'invoice.db'),
    driver: sqlite3.Database
  });

  // Create tables
  await db.exec(`
    -- Clients table
    CREATE TABLE IF NOT EXISTS clients (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      email TEXT,
      phone TEXT,
      address TEXT,
      city TEXT,
      state TEXT,
      zip TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    -- Services table
    CREATE TABLE IF NOT EXISTS services (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      category TEXT NOT NULL,
      description TEXT NOT NULL,
      base_price REAL DEFAULT 0,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    -- Invoices table
    CREATE TABLE IF NOT EXISTS invoices (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      invoice_number TEXT UNIQUE NOT NULL,
      client_id INTEGER,
      client_name TEXT,
      client_address TEXT,
      client_email TEXT,
      date_of_issue DATE DEFAULT CURRENT_DATE,
      due_date DATE,
      subtotal REAL DEFAULT 0,
      tax REAL DEFAULT 0,
      total REAL DEFAULT 0,
      status TEXT DEFAULT 'draft',
      notes TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (client_id) REFERENCES clients(id)
    );

    -- Line items table
    CREATE TABLE IF NOT EXISTS line_items (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      invoice INTEGER NOT NULL,
      service INTEGER,
      category TEXT,
      description TEXT,
      quantity REAL DEFAULT 1,
      rate REAL DEFAULT 0,
      total REAL DEFAULT 0,
      FOREIGN KEY (invoice) REFERENCES invoices(id) ON DELETE CASCADE,
      FOREIGN KEY (service) REFERENCES services(id)
    );

    -- Estimates table
    CREATE TABLE IF NOT EXISTS estimates (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      estimate_number TEXT UNIQUE NOT NULL,
      client_id INTEGER,
      client_name TEXT,
      date_of_issue DATE DEFAULT CURRENT_DATE,
      expiry_date DATE,
      subtotal REAL DEFAULT 0,
      tax REAL DEFAULT 0,
      total REAL DEFAULT 0,
      status TEXT DEFAULT 'pending',
      notes TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (client_id) REFERENCES clients(id)
    );

    -- Work orders table
    CREATE TABLE IF NOT EXISTS work_orders (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      work_order_number TEXT UNIQUE NOT NULL,
      client_id INTEGER,
      job_site_address TEXT,
      description TEXT,
      start_date DATE,
      completion_date DATE,
      status TEXT DEFAULT 'pending',
      priority TEXT DEFAULT 'normal',
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (client_id) REFERENCES clients(id)
    );

    -- Employees table
    CREATE TABLE IF NOT EXISTS employees (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      email TEXT,
      phone TEXT,
      position TEXT,
      hourly_rate REAL DEFAULT 0,
      hire_date DATE,
      status TEXT DEFAULT 'active',
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    -- Materials table
    CREATE TABLE IF NOT EXISTS materials (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      description TEXT,
      unit TEXT,
      cost_per_unit REAL DEFAULT 0,
      quantity_in_stock REAL DEFAULT 0,
      reorder_level REAL DEFAULT 0,
      supplier TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    -- Equipment table
    CREATE TABLE IF NOT EXISTS equipment (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      description TEXT,
      serial_number TEXT,
      purchase_date DATE,
      purchase_cost REAL DEFAULT 0,
      status TEXT DEFAULT 'available',
      maintenance_schedule TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    -- Vendors table
    CREATE TABLE IF NOT EXISTS vendors (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      contact_person TEXT,
      email TEXT,
      phone TEXT,
      address TEXT,
      category TEXT,
      payment_terms TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    -- Settings table
    CREATE TABLE IF NOT EXISTS settings (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      company_name TEXT,
      company_address TEXT,
      company_phone TEXT,
      company_email TEXT,
      company_logo TEXT,
      tax_rate REAL DEFAULT 0,
      payment_terms TEXT,
      invoice_prefix TEXT DEFAULT 'INV-',
      estimate_prefix TEXT DEFAULT 'EST-'
    );
  `);

  // Insert default settings if not exists
  const settingsExist = await db.get('SELECT * FROM settings LIMIT 1');
  if (!settingsExist) {
    await db.run(`
      INSERT INTO settings (
        company_name, 
        company_address, 
        company_phone, 
        company_email,
        tax_rate,
        invoice_prefix,
        estimate_prefix
      ) VALUES (?, ?, ?, ?, ?, ?, ?)
    `, [
      'SD-BCS',
      '',
      '',
      'm19u3l@sd-bcs.com',
      0.0825, // 8.25% default tax
      'INV-',
      'EST-'
    ]);
  }

  console.log('✅ Database initialized successfully');
  return db;
}

// Initialize database
const dbPromise = initDatabase();

// Export helper functions
// Insert sample data
async function insertSampleData() {
  const database = await dbPromise;
  
  // Check if data already exists
  const clientCount = await database.get('SELECT COUNT(*) as count FROM clients');
  if (clientCount.count > 0) {
    console.log('✅ Sample data already exists');
    return;
  }

  // Insert sample clients
  await database.run(`INSERT INTO clients (name, email, phone, address, city, state, zip) VALUES 
    ('John Smith', 'john.smith@example.com', '(619) 555-0100', '123 Main St', 'San Diego', 'CA', '92122'),
    ('Mary Johnson', 'mary.johnson@example.com', '(858) 555-0200', '456 Elm St', 'La Jolla', 'CA', '92037'),
    ('Acme HOA', 'hoa@acme.com', '(760) 555-0300', '789 Oak St', 'San Diego', 'CA', '92122')`);

  // Insert sample services
  await database.run(`INSERT INTO services (category, description, base_price) VALUES
    ('Water Remediation', 'Extraction and drying of water-damaged areas', 250.00),
    ('Mold Remediation', 'Mold inspection and removal', 350.00),
    ('Bathroom Repair', 'Repair and replacement of fixtures', 85.00),
    ('Drywall Repair', 'Patch and paint drywall', 65.00),
    ('Flooring Replacement', 'Replace damaged flooring', 120.00),
    ('Painting', 'Interior painting', 100.00),
    ('Plumbing Labor', 'Plumbing repair and installation', 90.00),
    ('Material Delivery', 'Delivery of materials', 50.00)`);

  console.log('✅ Sample data inserted');
}

// Call sample data insertion after initialization
insertSampleData().catch(console.error);

export default {
  get: async (sql, params) => {
    const database = await dbPromise;
    return database.get(sql, params);
  },
  all: async (sql, params) => {
    const database = await dbPromise;
    return database.all(sql, params);
  },
  run: async (sql, params) => {
    const database = await dbPromise;
    return database.run(sql, params);
  },
  exec: async (sql) => {
    const database = await dbPromise;
    return database.exec(sql);
  }
};

export { dbPromise };