<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Invoice Generator - SD-BCS</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            overflow: hidden;
        }

        header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }

        nav {
            background: #f8f9fa;
            padding: 15px 30px;
            border-bottom: 2px solid #e9ecef;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        nav button {
            background: white;
            border: 2px solid #667eea;
            color: #667eea;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s;
        }

        nav button:hover, nav button.active {
            background: #667eea;
            color: white;
        }

        .content {
            padding: 30px;
        }

        .section {
            display: none;
        }

        .section.active {
            display: block;
        }

        .card {
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .stat-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 12px;
            text-align: center;
        }

        .stat-card h3 {
            font-size: 0.9em;
            margin-bottom: 10px;
            opacity: 0.9;
        }

        .stat-card .number {
            font-size: 2.5em;
            font-weight: bold;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #e9ecef;
        }

        th {
            background: #f8f9fa;
            font-weight: 600;
            color: #667eea;
        }

        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            font-size: 16px;
            transition: transform 0.2s;
            margin: 5px;
        }

        .btn:hover {
            transform: translateY(-2px);
        }

        .btn-sm {
            padding: 6px 12px;
            font-size: 14px;
        }

        .btn-danger {
            background: #dc3545;
        }

        .btn-success {
            background: #28a745;
        }

        .form-group {
            margin-bottom: 15px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
            color: #333;
        }

        input, textarea, select {
            width: 100%;
            padding: 10px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
        }

        input:focus, textarea:focus, select:focus {
            outline: none;
            border-color: #667eea;
        }

        #message {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            display: none;
        }

        #message.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        #message.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .loading {
            text-align: center;
            padding: 20px;
        }

        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>ðŸ§¾ Invoice Generator</h1>
            <p>SD-BCS Business Management System</p>
        </header>

        <nav>
            <button class="active" onclick="showSection('dashboard')">Dashboard</button>
            <button onclick="showSection('clients')">Clients</button>
            <button onclick="showSection('invoices')">Invoices</button>
            <button onclick="showSection('services')">Services</button>
        </nav>

        <div class="content">
            <div id="message"></div>

            <!-- Dashboard Section -->
            <div id="dashboard" class="section active">
                <h2>Dashboard</h2>
                <div class="grid" id="dashboardStats">
                    <div class="loading">
                        <div class="spinner"></div>
                        <p>Loading dashboard...</p>
                    </div>
                </div>
            </div>

            <!-- Clients Section -->
            <div id="clients" class="section">
                <h2>Clients</h2>
                <button class="btn" onclick="showAddClientForm()">+ Add New Client</button>
                
                <div id="clientFormContainer" style="display: none;">
                    <div class="card">
                        <h3>New Client</h3>
                        <form id="clientForm">
                            <div class="form-group">
                                <label>Name *</label>
                                <input type="text" name="name" required>
                            </div>
                            <div class="form-group">
                                <label>Email</label>
                                <input type="email" name="email">
                            </div>
                            <div class="form-group">
                                <label>Phone</label>
                                <input type="tel" name="phone">
                            </div>
                            <div class="form-group">
                                <label>Address</label>
                                <input type="text" name="address">
                            </div>
                            <div class="grid">
                                <div class="form-group">
                                    <label>City</label>
                                    <input type="text" name="city">
                                </div>
                                <div class="form-group">
                                    <label>State</label>
                                    <input type="text" name="state" maxlength="2">
                                </div>
                                <div class="form-group">
                                    <label>ZIP</label>
                                    <input type="text" name="zip">
                                </div>
                            </div>
                            <button type="submit" class="btn">Save Client</button>
                            <button type="button" class="btn btn-danger" onclick="hideAddClientForm()">Cancel</button>
                        </form>
                    </div>
                </div>

                <div id="clientsList"></div>
            </div>

            <!-- Invoices Section -->
            <div id="invoices" class="section">
                <h2>Invoices</h2>
                <button class="btn" onclick="showAddInvoiceForm()">+ Create New Invoice</button>
                <div id="invoicesList"></div>
            </div>

            <!-- Services Section -->
            <div id="services" class="section">
                <h2>Services</h2>
                <button class="btn" onclick="showAddServiceForm()">+ Add New Service</button>
                <div id="servicesList"></div>
            </div>
        </div>
    </div>

    <script>
        const API_BASE = '/api';

        // Show message
        function showMessage(text, type = 'success') {
            const msg = document.getElementById('message');
            msg.textContent = text;
            msg.className = type;
            msg.style.display = 'block';
            setTimeout(() => msg.style.display = 'none', 5000);
        }

        // Show section
        function showSection(section) {
            document.querySelectorAll('.section').forEach(s => s.classList.remove('active'));
            document.querySelectorAll('nav button').forEach(b => b.classList.remove('active'));
            document.getElementById(section).classList.add('active');
            event.target.classList.add('active');

            if (section === 'dashboard') loadDashboard();
            if (section === 'clients') loadClients();
            if (section === 'invoices') loadInvoices();
            if (section === 'services') loadServices();
        }

        // Load Dashboard
        async function loadDashboard() {
            try {
                const response = await fetch(`${API_BASE}/dashboard/stats`);
                const stats = await response.json();
                
                document.getElementById('dashboardStats').innerHTML = `
                    <div class="stat-card">
                        <h3>Total Clients</h3>
                        <div class="number">${stats.totalClients || 0}</div>
                    </div>
                    <div class="stat-card">
                        <h3>Total Invoices</h3>
                        <div class="number">${stats.totalInvoices || 0}</div>
                    </div>
                    <div class="stat-card">
                        <h3>Total Revenue</h3>
                        <div class="number">$${(stats.totalInvoiceAmount || 0).toFixed(2)}</div>
                    </div>
                    <div class="stat-card">
                        <h3>Materials</h3>
                        <div class="number">${stats.totalMaterials || 0}</div>
                    </div>
                `;
            } catch (error) {
                showMessage('Error loading dashboard: ' + error.message, 'error');
            }
        }

        // Load Clients
        async function loadClients() {
            try {
                const response = await fetch(`${API_BASE}/clients`);
                const clients = await response.json();
                
                const html = clients.length > 0 ? `
                    <table>
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Phone</th>
                                <th>City</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${clients.map(c => `
                                <tr>
                                    <td>${c.name}</td>
                                    <td>${c.email || '-'}</td>
                                    <td>${c.phone || '-'}</td>
                                    <td>${c.city || '-'}</td>
                                    <td>
                                        <button class="btn btn-sm btn-danger" onclick="deleteClient(${c.id})">Delete</button>
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                ` : '<p>No clients found. Add your first client above!</p>';
                
                document.getElementById('clientsList').innerHTML = html;
            } catch (error) {
                showMessage('Error loading clients: ' + error.message, 'error');
            }
        }

        // Load Invoices
        async function loadInvoices() {
            try {
                const response = await fetch(`${API_BASE}/invoices`);
                const invoices = await response.json();
                
                const html = invoices.length > 0 ? `
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Client</th>
                                <th>Date</th>
                                <th>Total</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${invoices.map(inv => `
                                <tr>
                                    <td>#${inv.id}</td>
                                    <td>${inv.client_name || 'N/A'}</td>
                                    <td>${inv.date_created || 'N/A'}</td>
                                    <td>$${(inv.total || 0).toFixed(2)}</td>
                                    <td>
                                        <button class="btn btn-sm" onclick="downloadPDF(${inv.id})">PDF</button>
                                        <button class="btn btn-sm btn-danger" onclick="deleteInvoice(${inv.id})">Delete</button>
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                ` : '<p>No invoices found. Create your first invoice above!</p>';
                
                document.getElementById('invoicesList').innerHTML = html;
            } catch (error) {
                showMessage('Error loading invoices: ' + error.message, 'error');
            }
        }

        // Load Services
        async function loadServices() {
            try {
                const response = await fetch(`${API_BASE}/services`);
                const services = await response.json();
                
                const html = services.length > 0 ? `
                    <table>
                        <thead>
                            <tr>
                                <th>Category</th>
                                <th>Description</th>
                                <th>Base Price</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${services.map(s => `
                                <tr>
                                    <td>${s.category}</td>
                                    <td>${s.description}</td>
                                    <td>$${(s.base_price || 0).toFixed(2)}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                ` : '<p>No services found.</p>';
                
                document.getElementById('servicesList').innerHTML = html;
            } catch (error) {
                showMessage('Error loading services: ' + error.message, 'error');
            }
        }

        // Client Form Functions
        function showAddClientForm() {
            document.getElementById('clientFormContainer').style.display = 'block';
        }

        function hideAddClientForm() {
            document.getElementById('clientFormContainer').style.display = 'none';
            document.getElementById('clientForm').reset();
        }

        document.getElementById('clientForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);
            const data = Object.fromEntries(formData);
            
            try {
                const response = await fetch(`${API_BASE}/clients`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                
                if (response.ok) {
                    showMessage('Client created successfully!');
                    hideAddClientForm();
                    loadClients();
                } else {
                    throw new Error('Failed to create client');
                }
            } catch (error) {
                showMessage('Error: ' + error.message, 'error');
            }
        });

        // Delete Client
        async function deleteClient(id) {
            if (!confirm('Are you sure you want to delete this client?')) return;
            
            try {
                const response = await fetch(`${API_BASE}/clients/${id}`, {
                    method: 'DELETE'
                });
                
                if (response.ok) {
                    showMessage('Client deleted successfully!');
                    loadClients();
                } else {
                    throw new Error('Failed to delete client');
                }
            } catch (error) {
                showMessage('Error: ' + error.message, 'error');
            }
        }

        // Delete Invoice
        async function deleteInvoice(id) {
            if (!confirm('Are you sure you want to delete this invoice?')) return;
            
            try {
                const response = await fetch(`${API_BASE}/invoices/${id}`, {
                    method: 'DELETE'
                });
                
                if (response.ok) {
                    showMessage('Invoice deleted successfully!');
                    loadInvoices();
                } else {
                    throw new Error('Failed to delete invoice');
                }
            } catch (error) {
                showMessage('Error: ' + error.message, 'error');
            }
        }

        // Download PDF
        function downloadPDF(id) {
            window.open(`${API_BASE}/invoices/${id}/pdf`, '_blank');
        }

        // Invoice form placeholder
        function showAddInvoiceForm() {
            alert('Invoice creation form coming soon! Use the API directly for now:\n\nPOST /api/invoices\n{"client_id": 1, "line_items": [...]}');
        }

        // Service form placeholder
        function showAddServiceForm() {
            alert('Service creation form coming soon! Use the API directly for now:\n\nPOST /api/services\n{"category": "...", "description": "...", "base_price": 0}');
        }

        // Load dashboard on page load
        loadDashboard();
    </script>
</body>
</html>